diff -ur node_modules/karma.orig/lib/executor.js node_modules/karma/lib/executor.js
--- node_modules/karma.orig/lib/executor.js	2022-04-19 11:26:10.435803845 -0700
+++ node_modules/karma/lib/executor.js	2022-04-19 13:16:59.793887164 -0700
@@ -66,6 +66,7 @@
   }
 
   onRunComplete () {
+console.log('Executor.onRunComplete');
     if (this.executionScheduled) {
       this.schedule()
     }
@@ -77,6 +78,7 @@
   }
 
   onBrowserComplete () {
+console.log('Executor.onBrowserComplete');
     this.pendingCount--
 
     if (!this.pendingCount) {
Only in node_modules/karma/lib: .executor.js.swp
diff -ur node_modules/karma.orig/lib/launcher.js node_modules/karma/lib/launcher.js
--- node_modules/karma.orig/lib/launcher.js	2022-04-19 11:26:10.439803799 -0700
+++ node_modules/karma/lib/launcher.js	2022-04-19 13:19:17.760071080 -0700
@@ -48,7 +48,10 @@
       'config.processKillTimeout'
     ]
 
-    this._emitter.on('exit', (callback) => this.killAll(callback))
+    this._emitter.on('exit', (callback) => {
+console.log('launcher exit');
+      this.killAll(callback);
+    });
   }
 
   getBrowserById (id) {
@@ -160,6 +163,7 @@
   }
 
   killAll (callback) {
+console.log('Launcher.killAll', {callback});
     callback = callback || function () {}
     log.debug('Disconnecting all browsers')
 
@@ -170,7 +174,11 @@
     Promise.all(
       this._browsers
         .map((browser) => browser.forceKill())
-    ).then(callback)
+    ).then(() => {
+      console.log('Launcher forceKill all complete');
+    }).then(callback).then(() => {
+      console.log('Launcher forceKill all callback complete');
+    });
   }
 
   areAllCaptured () {
Only in node_modules/karma/lib: .launcher.js.swp
Only in node_modules/karma/lib/launchers: .base.js.swp
diff -ur node_modules/karma.orig/lib/launchers/process.js node_modules/karma/lib/launchers/process.js
--- node_modules/karma.orig/lib/launchers/process.js	2022-04-19 11:26:10.439803799 -0700
+++ node_modules/karma/lib/launchers/process.js	2022-04-19 12:52:41.893532954 -0700
@@ -6,6 +6,7 @@
   const self = this
   let onExitCallback
   const killTimeout = processKillTimeout || 2000
+console.log('ProcessLauncher killTimeout', killTimeout, 'ms');
   // Will hold output from the spawned child process
   const streamedOutputs = {
     stdout: '',
@@ -21,9 +22,11 @@
 
   this.on('kill', function (done) {
     if (!self._process) {
+console.log('on kill no process');
       return process.nextTick(done)
     }
 
+console.log('on kill');
     onExitCallback = done
     self._process.kill()
     self._killTimer = timer.setTimeout(self._onKillTimeout, killTimeout)
@@ -80,10 +83,12 @@
     self._process.stderr.on('data', self._onStderr)
 
     self._process.on('exit', function (code, signal) {
+console.log('ProcessLauncher._process on exit', {code, signal});
       self._onProcessExit(code, signal, errorOutput)
     })
 
     self._process.on('error', function (err) {
+console.log('ProcessLauncher._process on error', {err});
       if (err.code === 'ENOENT') {
         self._retryLimit = -1
         errorOutput = `Can not find the binary ${cmd}\n\tPlease set env variable ${self.ENV_CMD}`
@@ -136,22 +141,29 @@
   }
 
   this._clearTempDirAndReportDone = function (error) {
+console.log('ProcessLauncher._clearTempDirAndReportDone');
     tempDir.remove(self._tempDir, function () {
       self._done(error)
       if (onExitCallback) {
+console.log('ProcessLauncher.kill done');
         onExitCallback()
         onExitCallback = null
+      } else {
+console.log('ProcessLauncher done clearing, no exit callback!');
       }
     })
   }
 
   this._onKillTimeout = function () {
     if (self.state !== self.STATE_BEING_KILLED && self.state !== self.STATE_BEING_FORCE_KILLED) {
+console.log('ProcessLauncher._onKillTimeout ignored', self.state);
       return
     }
+console.log('ProcessLauncher._onKillTimeout', self.state);
 
     log.warn(`${self.name} was not killed in ${killTimeout} ms, sending SIGKILL.`)
     self._process.kill('SIGKILL')
+console.log('ProcessLauncher._onKillTimeout SIGKILL sent');
 
     // NOTE: https://github.com/karma-runner/karma/pull/1184
     // NOTE: SIGKILL is just a signal.  Processes should never ignore it, but they can.
@@ -160,6 +172,7 @@
     // This a certainly suboptimal, but it is better than having the test harness hang waiting
     // for a zombie child process to exit.
     self._killTimer = timer.setTimeout(function () {
+console.log('ProcessLauncher._onKillTimeout SIGKILL timeout');
       log.warn(`${self.name} was not killed by SIGKILL in ${killTimeout} ms, continuing.`)
       self._onProcessExit(-1, null, '')
     }, killTimeout)
Only in node_modules/karma/lib/launchers: .process.js.swp
diff -ur node_modules/karma.orig/lib/middleware/proxy.js node_modules/karma/lib/middleware/proxy.js
--- node_modules/karma.orig/lib/middleware/proxy.js	2022-04-19 11:26:10.439803799 -0700
+++ node_modules/karma/lib/middleware/proxy.js	2022-04-19 10:44:21.055275364 -0700
@@ -116,6 +116,7 @@
 exports.create = function (/* config */config, /* config.proxies */proxies, /* emitter */emitter) {
   const proxyRecords = parseProxyConfig(proxies, config)
   emitter.on('exit', (done) => {
+console.log('proxy exit');
     log.debug('Destroying proxy agents')
     proxyRecords.forEach((proxyRecord) => {
       proxyRecord.agent.destroy()
diff -ur node_modules/karma.orig/lib/server.js node_modules/karma/lib/server.js
--- node_modules/karma.orig/lib/server.js	2022-04-19 11:26:10.439803799 -0700
+++ node_modules/karma/lib/server.js	2022-04-19 10:44:55.890920009 -0700
@@ -175,6 +175,7 @@
     const name = 'exit'
     let pending = this.listeners(name).length
     const deferred = helper.defer()
+console.log('Server.emitExitAsync', {code, pending});
 
     function resolve () {
       deferred.resolve(code)
@@ -182,6 +183,7 @@
 
     try {
       this.emit(name, (newCode) => {
+console.log('Server.emit return', {newCode, pending});
         if (newCode && typeof newCode === 'number') {
           // Only update code if it is given and not zero
           code = newCode
@@ -347,12 +349,14 @@
 
     if (config.singleRun) {
       this.on('browser_restart_failure', (completedBrowser) => {
+console.log('browser_restart_failure');
         singleRunDoneBrowsers[completedBrowser.id] = true
         emitRunCompleteIfAllBrowsersDone()
       })
 
       // This is the normal exit trigger.
       this.on('browser_complete_with_no_more_retries', function (completedBrowser) {
+console.log('browser_complete_with_no_more_retries');
         singleRunDoneBrowsers[completedBrowser.id] = true
 
         if (launcher.kill(completedBrowser.id)) {
@@ -363,6 +367,7 @@
       })
 
       this.on('browser_process_failure', (browserLauncher) => {
+console.log('browser_process_failure');
         singleRunDoneBrowsers[browserLauncher.id] = true
         singleRunBrowserNotCaptured = true
 
@@ -370,6 +375,7 @@
       })
 
       this.on('run_complete', (browsers, results) => {
+console.log('run_complete, exiting');
         this.log.debug('Run complete, exiting.')
         this._close(results.exitCode)
       })
Only in node_modules/karma.orig/node_modules: source-map
diff -ur node_modules/karma-local-wd-launcher.orig/index.js node_modules/karma-local-wd-launcher/index.js
--- node_modules/karma-local-wd-launcher.orig/index.js	2022-04-19 11:26:10.423803984 -0700
+++ node_modules/karma-local-wd-launcher/index.js	2022-04-19 11:27:30.994866974 -0700
@@ -117,8 +117,10 @@
   };
 
   this.forceKill = async () => {
+console.log('karma-local-wd-launcher forceKill');
     this.state = 'BEING_FORCE_KILLED';
     await this.stopWebdriver_();
+console.log('karma-local-wd-launcher forceKill complete');
   };
 
   const originalStart = this.start;
@@ -173,12 +175,16 @@
 
   this.stopWebdriver_ = async () => {
     if (this.browser) {
+console.log('karma-local-wd-launcher stop session');
       await new Promise(resolve => this.browser.quit(resolve));
+console.log('karma-local-wd-launcher stop session complete');
     }
 
     // Now that the driver connection and browser are closed, emit the signal
     // that shuts down the driver executable.
+console.log('karma-local-wd-launcher emit kill');
     await this.emitAsync('kill');
+console.log('karma-local-wd-launcher emit kill complete');
 
     this.state = 'FINISHED';
   };
Only in node_modules/karma-local-wd-launcher: .index.js.swp
